{"version":3,"sources":["AppStyled.ts","components/counters.tsx","components/countersLogic.ts","App.tsx","index.tsx"],"names":["AppContainer","styled","div","FormHolder","Counters","useState","loading","setLoading","stepValues","setStepValues","addCounter","values","helper","length","push","stepValue","e","setSubmitting","useCounters","formik","useFormik","initialValues","onSubmit","Header","Layout","Content","handleSubmit","gutter","span","type","step","name","onChange","handleChange","placeholder","danger","htmlType","map","index","App","ReactDOM","render","document","getElementById"],"mappings":"g+BACO,IAAMA,EAAeC,IAAOC,IAAV,KA0BZC,GArBiBF,IAAOC,IAAV,KAqBDD,IAAOC,IAAV,M,qFClBVE,EAAW,WAAM,IAAD,ECNF,WAAkB,IAAD,EACXC,oBAAS,GADE,mBACjCC,EADiC,KACzBC,EADyB,OAELF,qBAFK,mBAEjCG,EAFiC,KAEtBC,EAFsB,KAqBxC,MAAM,CAACH,UAAQI,WAjBI,SAACC,EAAuBC,GACvC,IACIL,GAAW,IACX,OAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAYK,SACXL,EAAWM,KAAKH,EAAOI,WACvBN,EAAcD,IAGdC,EAAc,CAACE,EAAOI,YAE9B,MAAMC,IATN,QAWIT,GAAW,GACXK,EAAOK,eAAc,KAIHT,cDdcU,GAAjCZ,EADkB,EAClBA,QAAQI,EADU,EACVA,WAAWF,EADD,EACCA,WACpBW,EAASC,YAAyB,CACpCC,cAAe,CACXN,UAAY,GAEhBO,SAAUZ,IAGNa,EAAqBC,IAArBD,OAASE,EAAYD,IAAZC,QAGjB,OACA,kBAAC,IAAD,KACI,kBAACF,EAAD,KACI,kBAACpB,EAAD,KACI,0BAAMmB,SAAUH,EAAOO,cACnB,kBAAC,IAAD,CAAKC,OAAQ,IACT,kBAAC,IAAD,CAAKC,KAAM,GACP,kBAAC,IAAD,CACIC,KAAK,SACLC,KAAK,OACLC,KAAM,YACNC,SAAUb,EAAOc,aAEjBC,YAAa,6BAIrB,kBAAC,IAAD,CAAKN,KAAM,GACP,kBAAC,IAAD,CAAQO,QAAM,EAACN,KAAK,UAAUO,SAAU,UACnC9B,EAAU,kBAAC,IAAD,MAAW,oBAO9C,kBAACmB,EAAD,KACI,kBAAC,IAAD,KACKjB,GAAeA,EAAW6B,KAAI,SAACP,EAAKQ,WEjCtCC,MAVf,WACE,OACI,kBAACvC,EAAD,KACI,kBAAC,IAAD,KACE,kBAAC,EAAD,SCNZwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e57afa50.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport const AppContainer = styled.div`\n  min-height: 100vh;\n  text-align: right;\n`\n\nexport const CounterWrapper = styled.div`\n    font-weight:bold;\n    display:flex;\n    flex-direction:row;\n    justify-content : center;\n    margin :1em;\n    align-items : center;\n\n    & section {\n        min-height : 10vw;\n        min-width:10vw;\n        margin : auto;\n        display:flex;\n        flex-direction: column;\n        align-items: center !important;\n        & p {\n            font-size : 8em;\n        }\n    } \n    \n`\nexport const FormHolder = styled.div `\n    display :flex;\n    flex-direction : row;\n    justify-content : center;\n    & Form{\n        width:50%;\n    }\n\n`","import React from \"react\";\nimport {Button,Input,Layout,Col, Row,Spin} from \"antd\";\nimport {Counter} from \"./counter\";\nimport {useCounters} from \"./countersLogic\";\nimport {FormHolder} from \"../AppStyled\";\nimport { useFormik } from \"formik\";\nimport {stepValueForm} from \"./countersLogic\"\n\n\nexport const Counters = () =>{\n    const {loading,addCounter,stepValues} = useCounters();\n    const formik = useFormik<stepValueForm>({ /// use formik to submit the form \n        initialValues: {\n            stepValue : 0\n        },\n        onSubmit: addCounter,\n      });\n    \n    const { Header,  Content } = Layout;  /// destruct Header and Content from antd Layout \n\n      \n    return (\n    <Layout>\n        <Header>\n            <FormHolder>\n                <form onSubmit={formik.handleSubmit}>\n                    <Row gutter={16}  >                            \n                        <Col span={8}   >\n                            <Input  // to get the stepValue from user\n                                type=\"number\" //the type of entery has to be a number either positive or negative \n                                step=\"0.01\"  // will accept up to 2 floating points\n                                name={'stepValue'}\n                                onChange={formik.handleChange}\n                                \n                                placeholder={'please enter step value'} \n\n                            />\n                        </Col>\n                        <Col span={2}   >\n                            <Button danger type=\"primary\" htmlType={'submit'}  >\n                                {loading ? <Spin /> : \"Add Counter\"}                                \n                            </Button>\n                        </Col>                \n                    </Row>\n                </form>\n            </FormHolder>\n        </Header>\n        <Content>\n            <Row >\n                {stepValues  && stepValues.map((step,index)=>( /// to show all the counters which have been made till now\n                <Col span={8} key={index} >  \n                    <Counter step={step} id={index} />\n                </Col>\n                ))}\n            </Row>\n        </Content>\n    </Layout>\n    )\n}\n\n\n","import {FormikHelpers} from \"formik\";\nimport {useState} from \"react\";\n\nexport const useCounters = ():UseCounters =>{\n    const [loading,setLoading] = useState(false);\n    const [stepValues,setStepValues] = useState<number[]>(); /// set the step values as a array of state \n\n    const addCounter = (values: stepValueForm, helper: FormikHelpers<stepValueForm>)=>{ /// on submit of the form\n        try{\n            setLoading(true);\n            if(stepValues?.length){\n                stepValues.push(values.stepValue); /// if lenght is more than one push at the end of array\n                setStepValues(stepValues);\n            }\n            else\n                setStepValues([values.stepValue]);     /// not make an aray with first field stepValues\n        }\n        catch(e){\n        }finally{\n            setLoading(false);\n            helper.setSubmitting(false);\n        }\n    }\n\n    return{loading,addCounter,stepValues}\n}\nexport interface stepValueForm { /// form inputs types\n    stepValue : number;\n}\ninterface UseCounters { /// useCounters hook output type\n    loading :boolean;\n    addCounter : (values: stepValueForm, helper: FormikHelpers<stepValueForm>)=>void;\n    stepValues : number[] |undefined;\n}","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { AppContainer } from \"./AppStyled\";\nimport { ConfigProvider } from \"antd\";\nimport { Counters } from \"./components/counters\";\n\nfunction App() {\n  return (\n      <AppContainer>\n          <ConfigProvider  >\n            <Counters />\n          </ConfigProvider>\n      </AppContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}