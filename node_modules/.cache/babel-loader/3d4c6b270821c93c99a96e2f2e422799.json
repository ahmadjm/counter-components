{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nexport const useCounterLogic = step => {\n  const counterId = useRef(0);\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n        console.log(\"tests\");\n      }\n    };\n  }, []);\n\n  const count = () => {\n    setCounter(_count => _count + step);\n  };\n\n  const startToCount = () => {\n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n\n  return {\n    startToCount,\n    counter\n  };\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counterLogic.ts"],"names":["useState","useEffect","useRef","useCounterLogic","step","counterId","counter","setCounter","current","clearInterval","console","log","count","_count","startToCount","setInterval"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,eAAe,GAC1BC,IAD6B,IAEd;AACf,QAAMC,SAAS,GAAGH,MAAM,CAAS,CAAT,CAAxB;AAEE,QAAM,CAACI,OAAD,EAASC,UAAT,IAAqBP,QAAQ,CAAC,CAAD,CAAnC;AACFC,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAII,SAAS,CAACG,OAAV,IAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,aAAa,CAACJ,SAAS,CAACG,OAAX,CAAb;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAED;AACF,KAND;AAOD,GARQ,EAQP,EARO,CAAT;;AASA,QAAMC,KAAK,GAAG,MAAM;AAElBL,IAAAA,UAAU,CAAEM,MAAD,IAAUA,MAAM,GAACT,IAAlB,CAAV;AACD,GAHD;;AAIA,QAAMU,YAAY,GAAG,MAAM;AAEzB,QAAIT,SAAS,CAACG,OAAV,IAAqB,CAAzB,EAA4B;AAC1BH,MAAAA,SAAS,CAACG,OAAV,GAAoBO,WAAW,CAAC,MAAM;AAEpCH,QAAAA,KAAK;AACN,OAH8B,EAG5B,IAH4B,CAA/B;AAID;AACF,GARD;;AASA,SAAO;AAAEE,IAAAA,YAAF;AAAgBR,IAAAA;AAAhB,GAAP;AACD,CA7BM","sourcesContent":["import { FormikHelpers } from \"formik\";\nimport { useState, useEffect, useRef } from \"react\";\n\nexport const useCounterLogic = (\n  step: number,\n): UseCounter => {\n  const counterId = useRef<number>(0);\n  \n    const [counter,setCounter]=useState(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n        console.log(\"tests\");\n        \n      }\n    };\n  },[]);\n  const count = () => {\n      \n    setCounter((_count)=>_count+step);\n  };\n  const startToCount = () => {\n      \n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n          \n        count();\n      }, 1000);\n    }\n  };\n  return { startToCount, counter };\n};\n\ninterface UseCounter {\n  counter: number;\n  startToCount: () => void;\n}\n"]},"metadata":{},"sourceType":"module"}