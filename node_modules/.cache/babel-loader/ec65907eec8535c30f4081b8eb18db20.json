{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nexport const useCounterLogic = step => {\n  const counterId = useRef(0); ///  useRef to initiate a state whichits value will initiate just the first render\n\n  const [counter, setCounter] = useState(0); /// define our counter as a state \n\n  const ceil = num => Math.round((num + Number.EPSILON) * 100) / 100; /// to avoid javascript bad response on floating points\n\n\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current); //// component did mount\n      }\n    };\n  }, []); //// it will run just on the first render\n\n  const count = () => {\n    /// count with given steps and avoid concat instead of counting\n    setCounter(_count => ceil(_count + step));\n  };\n\n  const startToCount = () => {\n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n\n  return {\n    startToCount,\n    counter\n  };\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counterLogic.ts"],"names":["useState","useEffect","useRef","useCounterLogic","step","counterId","counter","setCounter","ceil","num","Math","round","Number","EPSILON","current","clearInterval","count","_count","startToCount","setInterval"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,eAAe,GAC1BC,IAD6B,IAEd;AACb,QAAMC,SAAS,GAAGH,MAAM,CAAC,CAAD,CAAxB,CADa,CACgB;;AAC7B,QAAM,CAACI,OAAD,EAASC,UAAT,IAAqBP,QAAQ,CAAC,CAAD,CAAnC,CAFa,CAE2B;;AACxC,QAAMQ,IAAI,GAAGC,GAAD,IAAeC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAAGG,MAAM,CAACC,OAAd,IAAyB,GAApC,IAA2C,GAAtE,CAHa,CAG6D;;;AAG5EZ,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAII,SAAS,CAACS,OAAV,IAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,aAAa,CAACV,SAAS,CAACS,OAAX,CAAb,CAD0B,CACQ;AACnC;AACF,KAJD;AAKD,GANQ,EAMP,EANO,CAAT,CANe,CAYR;;AACP,QAAME,KAAK,GAAG,MAAM;AAAE;AACpBT,IAAAA,UAAU,CAAEU,MAAD,IAAUT,IAAI,CAACS,MAAM,GAACb,IAAR,CAAf,CAAV;AAED,GAHD;;AAIA,QAAMc,YAAY,GAAG,MAAM;AACzB,QAAIb,SAAS,CAACS,OAAV,IAAqB,CAAzB,EAA4B;AAC1BT,MAAAA,SAAS,CAACS,OAAV,GAAoBK,WAAW,CAAC,MAAM;AACpCH,QAAAA,KAAK;AACN,OAF8B,EAE5B,IAF4B,CAA/B;AAGD;AACF,GAND;;AAOA,SAAO;AAAEE,IAAAA,YAAF;AAAgBZ,IAAAA;AAAhB,GAAP;AACD,CA3BM","sourcesContent":["\nimport { useState, useEffect, useRef } from \"react\";\n\nexport const useCounterLogic = (\n  step: number,\n): UseCounter => {\n    const counterId = useRef(0); ///  useRef to initiate a state whichits value will initiate just the first render\n    const [counter,setCounter]=useState(0); /// define our counter as a state \n    const ceil =(num:number)=> Math.round((num + Number.EPSILON) * 100) / 100 /// to avoid javascript bad response on floating points\n\n\n  useEffect(() => { \n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current); //// component did mount\n      }\n    };\n  },[]); //// it will run just on the first render\n  const count = () => { /// count with given steps and avoid concat instead of counting\n    setCounter((_count)=>ceil(_count+step));\n\n  };\n  const startToCount = () => {\n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n  return { startToCount, counter };\n};\n\ninterface UseCounter {\n  counter: number;\n  startToCount: () => void;\n}\n"]},"metadata":{},"sourceType":"module"}