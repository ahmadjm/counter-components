{"ast":null,"code":"import _slicedToArray from\"/home/ahmad/projects/Yasna Team/counters/counters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect,useRef}from\"react\";export var useCounterLogic=function useCounterLogic(step){var counterId=useRef(0);///  useRef to initiate a state which its value will initiate just the first render\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),counter=_useState2[0],setCounter=_useState2[1];/// define our counter as a state \nvar ceil=function ceil(num){return Math.round((num+Number.EPSILON)*100)/100;};/// to avoid javascript bad response on floating points\nuseEffect(function(){return function(){if(counterId.current!==0){clearInterval(counterId.current);//// component did mount\n}};},[]);//// it will run just on the first render\nvar count=function count(){/// count with given steps and avoid concat instead of counting\nsetCounter(function(_count){return ceil(_count+step);});};var startToCount=function startToCount(){/// runs on click of the button\nif(counterId.current===0){counterId.current=setInterval(function(){count();},1000);}};return{startToCount:startToCount,counter:counter};};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/counters/src/components/counterLogic.ts"],"names":["useState","useEffect","useRef","useCounterLogic","step","counterId","counter","setCounter","ceil","num","Math","round","Number","EPSILON","current","clearInterval","count","_count","startToCount","setInterval"],"mappings":"wKAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BC,IAD6B,CAEd,CACb,GAAMC,CAAAA,SAAS,CAAGH,MAAM,CAAC,CAAD,CAAxB,CAA6B;AADhB,cAEcF,QAAQ,CAAC,CAAD,CAFtB,wCAENM,OAFM,eAEEC,UAFF,eAE2B;AACxC,GAAMC,CAAAA,IAAI,CAAE,QAANA,CAAAA,IAAM,CAACC,GAAD,QAAeC,CAAAA,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,CAAGG,MAAM,CAACC,OAAd,EAAyB,GAApC,EAA2C,GAA1D,EAAZ,CAA0E;AAG5EZ,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACX,GAAII,SAAS,CAACS,OAAV,GAAsB,CAA1B,CAA6B,CAC3BC,aAAa,CAACV,SAAS,CAACS,OAAX,CAAb,CAAkC;AACnC,CACF,CAJD,CAKD,CANQ,CAMP,EANO,CAAT,CAMO;AACP,GAAME,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAAE;AACpBT,UAAU,CAAC,SAACU,MAAD,QAAUT,CAAAA,IAAI,CAACS,MAAM,CAACb,IAAR,CAAd,EAAD,CAAV,CAED,CAHD,CAIA,GAAMc,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAAC;AAC1B,GAAIb,SAAS,CAACS,OAAV,GAAsB,CAA1B,CAA6B,CAC3BT,SAAS,CAACS,OAAV,CAAoBK,WAAW,CAAC,UAAM,CACpCH,KAAK,GACN,CAF8B,CAE5B,IAF4B,CAA/B,CAGD,CACF,CAND,CAOA,MAAO,CAAEE,YAAY,CAAZA,YAAF,CAAgBZ,OAAO,CAAPA,OAAhB,CAAP,CACD,CA3BM","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nexport const useCounterLogic = (\n  step: number,\n): UseCounter => {\n    const counterId = useRef(0); ///  useRef to initiate a state which its value will initiate just the first render\n    const [counter,setCounter]=useState(0); /// define our counter as a state \n    const ceil =(num:number)=> Math.round((num + Number.EPSILON) * 100) / 100 /// to avoid javascript bad response on floating points\n\n\n  useEffect(() => { \n    return () => {\n      if (counterId.current !== 0) {\n        clearInterval(counterId.current); //// component did mount\n      }\n    };\n  },[]); //// it will run just on the first render\n  const count = () => { /// count with given steps and avoid concat instead of counting\n    setCounter((_count)=>ceil(_count+step));\n\n  };\n  const startToCount = () => {/// runs on click of the button\n    if (counterId.current === 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n  return { startToCount, counter };\n};\n\n\ninterface UseCounter {\n  counter: number;\n  startToCount: () => void;\n}\n"]},"metadata":{},"sourceType":"module"}