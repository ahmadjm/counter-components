{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nexport const useCounterLogic = step => {\n  const counterId = useRef(0);\n  let i = 1;\n  const j = useRef(2);\n  console.log(i, j);\n  i = 3;\n  j.current = 5;\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n      }\n    };\n  }, []);\n\n  const count = () => {\n    setCounter(_count => _count + step);\n  };\n\n  const startToCount = () => {\n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n\n  return {\n    startToCount,\n    counter\n  };\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counterLogic.ts"],"names":["useState","useEffect","useRef","useCounterLogic","step","counterId","i","j","console","log","current","counter","setCounter","clearInterval","count","_count","startToCount","setInterval"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,eAAe,GAC1BC,IAD6B,IAEd;AACf,QAAMC,SAAS,GAAGH,MAAM,CAAS,CAAT,CAAxB;AACE,MAAII,CAAC,GAAE,CAAP;AACA,QAAMC,CAAC,GAAGL,MAAM,CAAC,CAAD,CAAhB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ,EAAcC,CAAd;AACAD,EAAAA,CAAC,GAAC,CAAF;AACAC,EAAAA,CAAC,CAACG,OAAF,GAAU,CAAV;AAEA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAqBZ,QAAQ,CAAC,CAAD,CAAnC;AACFC,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAII,SAAS,CAACK,OAAV,IAAqB,CAAzB,EAA4B;AAC1BG,QAAAA,aAAa,CAACR,SAAS,CAACK,OAAX,CAAb;AACD;AACF,KAJD;AAKD,GANQ,EAMP,EANO,CAAT;;AAOA,QAAMI,KAAK,GAAG,MAAM;AAClBF,IAAAA,UAAU,CAAEG,MAAD,IAAUA,MAAM,GAACX,IAAlB,CAAV;AAED,GAHD;;AAIA,QAAMY,YAAY,GAAG,MAAM;AAEzB,QAAIX,SAAS,CAACK,OAAV,IAAqB,CAAzB,EAA4B;AAC1BL,MAAAA,SAAS,CAACK,OAAV,GAAoBO,WAAW,CAAC,MAAM;AACpCH,QAAAA,KAAK;AACN,OAF8B,EAE5B,IAF4B,CAA/B;AAGD;AACF,GAPD;;AAQA,SAAO;AAAEE,IAAAA,YAAF;AAAgBL,IAAAA;AAAhB,GAAP;AACD,CA/BM","sourcesContent":["import { FormikHelpers } from \"formik\";\nimport { useState, useEffect, useRef } from \"react\";\n\nexport const useCounterLogic = (\n  step: number,\n): UseCounter => {\n  const counterId = useRef<number>(0);\n    let i= 1;\n    const j = useRef(2);\n    console.log(i,j);\n    i=3;\n    j.current=5;\n    \n    const [counter,setCounter]=useState(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n      }\n    };\n  },[]);\n  const count = () => {\n    setCounter((_count)=>_count+step);\n\n  };\n  const startToCount = () => {\n      \n    if (counterId.current == 0) {\n      counterId.current = setInterval(() => {\n        count();\n      }, 1000);\n    }\n  };\n  return { startToCount, counter };\n};\n\ninterface UseCounter {\n  counter: number;\n  startToCount: () => void;\n}\n"]},"metadata":{},"sourceType":"module"}