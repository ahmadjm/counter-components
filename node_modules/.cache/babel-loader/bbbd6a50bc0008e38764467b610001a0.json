{"ast":null,"code":"var _jsxFileName = \"/home/ahmad/projects/Yasna Team/counters/src/components/counters.tsx\";\nimport React from \"react\";\nimport { Button, Input, Layout, Col, Row, Spin } from \"antd\";\nimport { Counter } from \"./counter\";\nimport { useCounters } from \"./countersLogic\";\nimport { FormHolder } from \"../AppStyled\";\nimport { useFormik } from \"formik\";\nexport const Counters = () => {\n  const {\n    loading,\n    addCounter,\n    stepValues\n  } = useCounters();\n  const formik = useFormik({\n    /// use formik to submit the form \n    initialValues: {\n      stepValue: 0\n    },\n    onSubmit: addCounter\n  });\n  const {\n    Header,\n    Content\n  } = Layout; /// destruct Header and Content from antd Layout \n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormHolder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input // to get the stepValue from user\n  , {\n    type: \"number\" //the type of entery has to be a number either positive or negative \n    ,\n    step: \"0.01\" // will accept up to 2 floating points\n    ,\n    name: 'stepValue',\n    onChange: formik.handleChange,\n    value: formik.values.stepValue,\n    placeholder: 'please enter step value',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    danger: true,\n    type: \"primary\",\n    htmlType: 'submit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Spin, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 44\n    }\n  }) : \"Add Counter\")))))), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, stepValues && stepValues.map((step, index) =>\n  /*#__PURE__*/\n  /// to show all the counters which have been made till now\n  React.createElement(Col, {\n    span: 8,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Counter, {\n    step: step,\n    id: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }))))));\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counters.tsx"],"names":["React","Button","Input","Layout","Col","Row","Spin","Counter","useCounters","FormHolder","useFormik","Counters","loading","addCounter","stepValues","formik","initialValues","stepValue","onSubmit","Header","Content","handleSubmit","handleChange","values","map","step","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,KAAf,EAAqBC,MAArB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAqCC,IAArC,QAAgD,MAAhD;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAIA,OAAO,MAAMC,QAAQ,GAAG,MAAK;AACzB,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA,UAAT;AAAoBC,IAAAA;AAApB,MAAkCN,WAAW,EAAnD;AACA,QAAMO,MAAM,GAAGL,SAAS,CAAgB;AAAE;AACtCM,IAAAA,aAAa,EAAE;AACXC,MAAAA,SAAS,EAAG;AADD,KADqB;AAIpCC,IAAAA,QAAQ,EAAEL;AAJ0B,GAAhB,CAAxB;AAOA,QAAM;AAAEM,IAAAA,MAAF;AAAWC,IAAAA;AAAX,MAAuBjB,MAA7B,CATyB,CASa;;AAGtC,sBACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,QAAQ,EAAEY,MAAM,CAACM,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD,CAAQ;AAAR;AACI,IAAA,IAAI,EAAC,QADT,CACkB;AADlB;AAEI,IAAA,IAAI,EAAC,MAFT,CAEiB;AAFjB;AAGI,IAAA,IAAI,EAAE,WAHV;AAII,IAAA,QAAQ,EAAEN,MAAM,CAACO,YAJrB;AAKI,IAAA,KAAK,EAAEP,MAAM,CAACQ,MAAP,CAAcN,SALzB;AAMI,IAAA,WAAW,EAAE,yBANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAWI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,IAAI,EAAC,SAApB;AAA8B,IAAA,QAAQ,EAAE,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,OAAO,gBAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAc,aAD1B,CADJ,CAXJ,CADJ,CADJ,CADJ,CADJ,eAwBI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,UAAU,IAAKA,UAAU,CAACU,GAAX,CAAe,CAACC,IAAD,EAAMC,KAAN;AAAA;AAAgB;AAC/C,sBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAc,IAAA,GAAG,EAAEA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAED,IAAf;AAAqB,IAAA,EAAE,EAAEC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADgB,CADpB,CADJ,CAxBJ,CADA;AAoCH,CAhDM","sourcesContent":["import React from \"react\";\nimport {Button,Input,Layout,Col, Row,Spin} from \"antd\";\nimport {Counter} from \"./counter\";\nimport {useCounters} from \"./countersLogic\";\nimport {FormHolder} from \"../AppStyled\";\nimport { useFormik } from \"formik\";\nimport {stepValueForm} from \"./countersLogic\"\n\n\nexport const Counters = () =>{\n    const {loading,addCounter,stepValues} = useCounters();\n    const formik = useFormik<stepValueForm>({ /// use formik to submit the form \n        initialValues: {\n            stepValue : 0\n        },\n        onSubmit: addCounter,\n      });\n    \n    const { Header,  Content } = Layout;  /// destruct Header and Content from antd Layout \n\n      \n    return (\n    <Layout>\n        <Header>\n            <FormHolder>\n                <form onSubmit={formik.handleSubmit}>\n                    <Row gutter={16}  >                            \n                        <Col span={8}   >\n                            <Input  // to get the stepValue from user\n                                type=\"number\" //the type of entery has to be a number either positive or negative \n                                step=\"0.01\"  // will accept up to 2 floating points\n                                name={'stepValue'}\n                                onChange={formik.handleChange}\n                                value={formik.values.stepValue} \n                                placeholder={'please enter step value'} \n                            />\n                        </Col>\n                        <Col span={2}   >\n                            <Button danger type=\"primary\" htmlType={'submit'}  >\n                                {loading ? <Spin /> : \"Add Counter\"}                                \n                            </Button>\n                        </Col>                \n                    </Row>\n                </form>\n            </FormHolder>\n        </Header>\n        <Content>\n            <Row >\n                {stepValues  && stepValues.map((step,index)=>( /// to show all the counters which have been made till now\n                <Col span={8} key={index} >  \n                    <Counter step={step} id={index} />\n                </Col>\n                ))}\n            </Row>\n        </Content>\n    </Layout>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}