{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nexport const useCounterLogic = (step, counter, setCounter) => {\n  const counterId = useRef(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n      }\n    };\n  }, []);\n\n  const count = () => {\n    setCounter(parseFloat(counter.toString()) + parseFloat(step.toString()));\n  };\n\n  const startToCount = () => {\n    console.log(\"called\");\n\n    if (counterId.current != 0) {\n      counterId.current = setInterval(() => {\n        console.log(\"count\");\n        count();\n      }, 1000);\n    }\n  };\n\n  return {\n    startToCount,\n    counter\n  };\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counterLogic.ts"],"names":["useEffect","useRef","useCounterLogic","step","counter","setCounter","counterId","current","clearInterval","count","parseFloat","toString","startToCount","console","log","setInterval"],"mappings":"AACA,SAAmBA,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,IAD6B,EAE7BC,OAF6B,EAG7BC,UAH6B,KAId;AACf,QAAMC,SAAS,GAAGL,MAAM,CAAS,CAAT,CAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAIM,SAAS,CAACC,OAAV,IAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,aAAa,CAACF,SAAS,CAACC,OAAX,CAAb;AACD;AACF,KAJD;AAKD,GANQ,EAMP,EANO,CAAT;;AAOA,QAAME,KAAK,GAAG,MAAM;AAClBJ,IAAAA,UAAU,CAACK,UAAU,CAACN,OAAO,CAACO,QAAR,EAAD,CAAV,GAAiCD,UAAU,CAACP,IAAI,CAACQ,QAAL,EAAD,CAA5C,CAAV;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AAEF,QAAIR,SAAS,CAACC,OAAV,IAAqB,CAAzB,EAA4B;AAC1BD,MAAAA,SAAS,CAACC,OAAV,GAAoBQ,WAAW,CAAC,MAAM;AAClCF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACFL,QAAAA,KAAK;AACN,OAH8B,EAG5B,IAH4B,CAA/B;AAID;AACF,GATD;;AAUA,SAAO;AAAEG,IAAAA,YAAF;AAAgBR,IAAAA;AAAhB,GAAP;AACD,CA3BM","sourcesContent":["import { FormikHelpers } from \"formik\";\nimport { useState, useEffect, useRef } from \"react\";\n\nexport const useCounterLogic = (\n  step: number,\n  counter: number,\n  setCounter: (count: number) => void\n): UseCounter => {\n  const counterId = useRef<number>(0);\n  useEffect(() => {\n    return () => {\n      if (counterId.current != 0) {\n        clearInterval(counterId.current);\n      }\n    };\n  },[]);\n  const count = () => {\n    setCounter(parseFloat(counter.toString()) + parseFloat(step.toString()));\n  };\n  const startToCount = () => {\n      console.log(\"called\");\n      \n    if (counterId.current != 0) {\n      counterId.current = setInterval(() => {\n          console.log(\"count\");\n        count();\n      }, 1000);\n    }\n  };\n  return { startToCount, counter };\n};\n\ninterface UseCounter {\n  counter: number;\n  startToCount: () => void;\n}\n"]},"metadata":{},"sourceType":"module"}