{"ast":null,"code":"import _slicedToArray from\"/home/ahmad/projects/Yasna Team/counters/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";export var useCounters=function useCounters(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),stepValues=_useState4[0],setStepValues=_useState4[1];/// set the step values as a array of state \nvar addCounter=function addCounter(values,helper){/// on submit of the form\ntry{setLoading(true);if(stepValues===null||stepValues===void 0?void 0:stepValues.length){stepValues.push(values.stepValue);/// if lenght is more than one push at the end of array\nsetStepValues(stepValues);}else setStepValues([values.stepValue]);/// not make an aray with first field stepValues\n}catch(e){}finally{setLoading(false);helper.setSubmitting(false);}};return{loading:loading,addCounter:addCounter,stepValues:stepValues};};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/countersLogic.ts"],"names":["useState","useCounters","loading","setLoading","stepValues","setStepValues","addCounter","values","helper","length","push","stepValue","e","setSubmitting"],"mappings":"+JACA,OAAQA,QAAR,KAAuB,OAAvB,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAiB,eACXD,QAAQ,CAAC,KAAD,CADG,wCACjCE,OADiC,eACzBC,UADyB,8BAELH,QAAQ,EAFH,yCAEjCI,UAFiC,eAEtBC,aAFsB,eAEiB;AAEzD,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAAwBC,MAAxB,CAA+D,CAAE;AAChF,GAAG,CACCL,UAAU,CAAC,IAAD,CAAV,CACA,GAAGC,UAAH,SAAGA,UAAH,iBAAGA,UAAU,CAAEK,MAAf,CAAsB,CAClBL,UAAU,CAACM,IAAX,CAAgBH,MAAM,CAACI,SAAvB,EAAmC;AACnCN,aAAa,CAACD,UAAD,CAAb,CACH,CAHD,IAKIC,CAAAA,aAAa,CAAC,CAACE,MAAM,CAACI,SAAR,CAAD,CAAb,CAAuC;AAC9C,CACD,MAAMC,CAAN,CAAQ,CACP,CAVD,OAUQ,CACJT,UAAU,CAAC,KAAD,CAAV,CACAK,MAAM,CAACK,aAAP,CAAqB,KAArB,EACH,CACJ,CAfD,CAiBA,MAAM,CAACX,OAAO,CAAPA,OAAD,CAASI,UAAU,CAAVA,UAAT,CAAoBF,UAAU,CAAVA,UAApB,CAAN,CACH,CAtBM","sourcesContent":["import {FormikHelpers} from \"formik\";\nimport {useState} from \"react\";\n\nexport const useCounters = ():UseCounters =>{\n    const [loading,setLoading] = useState(false);\n    const [stepValues,setStepValues] = useState<number[]>(); /// set the step values as a array of state \n\n    const addCounter = (values: stepValueForm, helper: FormikHelpers<stepValueForm>)=>{ /// on submit of the form\n        try{\n            setLoading(true);\n            if(stepValues?.length){\n                stepValues.push(values.stepValue); /// if lenght is more than one push at the end of array\n                setStepValues(stepValues);\n            }\n            else\n                setStepValues([values.stepValue]);     /// not make an aray with first field stepValues\n        }\n        catch(e){\n        }finally{\n            setLoading(false);\n            helper.setSubmitting(false);\n        }\n    }\n\n    return{loading,addCounter,stepValues}\n}\nexport interface stepValueForm { /// form inputs types\n    stepValue : number;\n}\ninterface UseCounters { /// useCounters hook output type\n    loading :boolean;\n    addCounter : (values: stepValueForm, helper: FormikHelpers<stepValueForm>)=>void;\n    stepValues : number[] |undefined;\n}"]},"metadata":{},"sourceType":"module"}