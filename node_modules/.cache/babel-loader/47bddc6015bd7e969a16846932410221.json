{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport const useCounterLogic = (step, counter, setCounter) => {\n  const [start, setStart] = useState(false);\n  useEffect(() => {\n    if (start) {\n      const id = setInterval(() => {\n        startToCount();\n        console.log(\"test\");\n      }, 1000);\n      console.log(id);\n      return () => clearInterval(id);\n    }\n  }, [start, counter]); // \n\n  const startToCount = () => {\n    setCounter(parseFloat(counter.toString()) + parseFloat(step.toString()));\n    setStart(true);\n  };\n\n  return {\n    startToCount,\n    counter\n  };\n};","map":{"version":3,"sources":["/home/ahmad/projects/Yasna Team/counters/src/components/counterLogic.ts"],"names":["useState","useEffect","useCounterLogic","step","counter","setCounter","start","setStart","id","setInterval","startToCount","console","log","clearInterval","parseFloat","toString"],"mappings":"AACA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAaC,OAAb,EAA4BC,UAA5B,KAA4E;AACvG,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,KAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,KAAH,EAAS;AACL,YAAME,EAAE,GAAGC,WAAW,CAAC,MAAM;AACzBC,QAAAA,YAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEH,OAJqB,EAInB,IAJmB,CAAtB;AAKAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AAEA,aAAO,MAAMK,aAAa,CAACL,EAAD,CAA1B;AACH;AACF,GAXM,EAWJ,CAACF,KAAD,EAAOF,OAAP,CAXI,CAAT,CAHuG,CAchF;;AAEvB,QAAMM,YAAY,GAAG,MAAI;AACjBL,IAAAA,UAAU,CAACS,UAAU,CAACV,OAAO,CAACW,QAAR,EAAD,CAAV,GAAiCD,UAAU,CAACX,IAAI,CAACY,QAAL,EAAD,CAA5C,CAAV;AACAR,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACP,GAHD;;AAIA,SAAO;AAACG,IAAAA,YAAD;AAAcN,IAAAA;AAAd,GAAP;AACH,CArBM","sourcesContent":["import {FormikHelpers} from \"formik\";\nimport {useState,useEffect} from \"react\";\n\nexport const useCounterLogic = (step:number,counter:number,setCounter:(count :number)=>void):UseCounter  =>{\n    const [start,setStart] = useState(false);\n  \n    useEffect(() => {\n        if(start){\n            const id = setInterval(() => {\n                startToCount(); \n                console.log(\"test\");\n                \n            }, 1000);\n            console.log(id);\n            \n            return () => clearInterval(id);\n        }\n      }, [start,counter]); // \n\n    const startToCount = ()=>{\n            setCounter(parseFloat(counter.toString()) + parseFloat(step.toString()));\n            setStart(true);\n    }\n    return {startToCount,counter}\n}\n\ninterface UseCounter {\n    counter:number;\n    startToCount : ()=>void;\n}\n"]},"metadata":{},"sourceType":"module"}